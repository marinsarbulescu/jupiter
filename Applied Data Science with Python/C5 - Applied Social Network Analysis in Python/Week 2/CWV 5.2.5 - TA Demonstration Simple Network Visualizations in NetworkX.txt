Hi everyone, today we'll be looking at visualizing networks using NetworkX. Although NetworkX is not primarily a graph drawing package, it does provide some basic functionality for visualization with Matplotlib. This allows us to see and explore our graphs, assuming they aren't too large. Now, let's get started with our network. Today, we'll be looking at a distribution network containing 51 US cities. Each city in this network has two node attributes, location and population. Edges correspond to connections that our distribution network can make between cities with the weight attribute corresponding to the cost of traveling over that connection. First, let's read in our graph which is in Python pickle file format as graph G. Next, we can create a new figure and draw the graph G using Matplotlib by calling draw NetworkX. This will draw the graph with defaults of circular red nodes, black edges and labels. Notice the positioning of the notes provides us with some insight on the structure of our network although this layout might not be the best one for us to use. One of the largest challenges when visualizing networks is figuring out where the nodes should be positioned. NetworkX offers a few node positioning algorithms to help create layouts for the network visualization. For example, draw NetworkX uses the spring layout by default, which tries to position nodes with as few crossing edges as possible while keeping edge length similar. Using less comprehension we can see what layouts NetworkX provides us with. These functions return a dictionary of node positions which we can then pass in to draw NetworkX. Here we can see what the positions are that the random layout has given us. Although circular layout gives us very different looking positions by placing the nodes in a circle. Which layout is best to use is heavily dependent on the characteristics of the network. So trying out various layouts can be very important when creating a visualization. You can also use your own layout by passing in a dictionary of node positions. Our distribution network actually has a node attribute of location which we can use for the position. So let's try using those. If you're familiar with the locations of US cities, you may be able to now better recognize this network. Next, let's try playing around with some of the parameters to see how we can change the look of our visualization. We can set the transparency with the alpha parameter, move labels and make the edges gray. Let's also turn the axis off and reduce padding. Looking at our new figure, we can see that by removing some of the information we've made the structure of the network easier to see. Now, let's see how to change the node color, node size and edge width. Let's set the node color based on the degree of the node, using this comprehension we can get a list of the degrees. We'll set the node size based on the population of each node and multiply each value by a small number so that the nodes aren't too large. We can also use this comprehension to get the weights or the costs of each edge to be used for the edge widths and also multiply this value by a small number so that the widths are appropriate. Passing all of these into draw NetworkX and setting the color map to blue, we can see that we've created a pretty interesting visualization. Now, we can quickly see which nodes in our distribution network have high population or high degree. One last thing I would like to show you is how to plot edges, nodes or labels separately. Suppose we wanted to visually identify the most expensive edges in our network, say where the cost was greater than 770. We can use this comprehension to find the subset of edges with the weight larger than 770 and pass this into the edgeless perimeter of draw network edges. We also indicate that we want to highlight these edges with thick, semi-transparent, red lines. Additionally, let's use draw NetworkX labels to add labels to Los Angeles and New York City. Looking at our network visualization by separately adding specific edges and labels, we can now clearly see the high cost edges as well as the locations of New York City and Los Angeles. We've covered many of the tools NetworkX provides for network visualization. But remember you can always check the NetworkX documentation for additional information on drawing functions and their parameters. That wraps it up for this tutorial on visualizing networks in NetworkX. If you're interested in creating more in-depth visualizations of larger networks consider exploring some more fully featured graph visualization tools such as side escape, Gephi or Graphviz. As always, thanks for watching.